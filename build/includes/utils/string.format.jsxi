// ==Jsx==
// @compress  on
// ==/Jsx==

/*******************************************************
 * String.Format 1.0 - JScript аналог C# String.Format
 *
 * Copyright (c) 2010, Dema (Dema.ru)
 * Лицензия LGPL для любого использования
 *
 *******************************************************/
 
// Инициализация форматирования
(function(st)
{
	// Собственно сам метод форматирования, параметров можно задавать много
	// Использовать так: var str = "Строка формата {0}, использование форматирования {1:формат}".format(some1, some2);
	st.format					= function()
	{
		if(arguments.length==0) return this;
		// RegExp для поиска меток
		var placeholder			= /\{(\d+)(?:,([-+]?\d+))?(?:\:([^(^}]+)(?:\(((?:\\\)|[^)])+)\)){0,1}){0,1}\}/g;
		var args				= arguments;
		// Одним проходом ищем, форматируем и вставляем вместо меток
		return this.replace(placeholder, function(m, num, len, f, params){
			m					= args[Number(num)];	// берем значение по номеру
			f					= formatters[f];		// пытаемся определить функцию форматирования
			return fl(f==null?m:f(m, pp((params || '').replace(/\\\)/g, ')').replace(/\\,/g, '\0').split(','), args) ), len);
		});
	};
	// Реализация форматирования "как в C#": var str = String.Format(format, arg0[, arg1[, arg2 ...]]);
	String.format				= function(format)
	{
		return arguments.length<=1?format:st.format.apply(format, Array.prototype.slice.call(arguments, 1));
	};
	// Добавить формат
	// name    - имя, которое будет использоваться в форматировании
	// func    - функция форматирования, принимает 2 параметра: значение и параметры для форматирования
	// replace - для замены уже зарегистрированного форматирования нужно передать true
	st.format.add				= function(name, func, replace)
	{
		if(formatters[name]!=null && !replace) throw 'Format '+name+' exist, use replace=true for replace';
		formatters[name]		= func;
	};
	// Инициализация параметров форматирования
	// param - объект с настройками в виде { формат: настройка }, где "настройка" зависит от формата и может быть как
	// простым значением, так и объектом типа { параметр: значение, ... }. См. описание настроек для конкретного формата.
	String.format.init			=
	st.format.init				= function(param)
	{
		var f;
		for(var n in param)
		{
			f					= formatters[n];
			if(f!=null && f.init!=null) f.init(param[n]);
		}
	};
	// Получить функцию форматирования по имени
	st.format.get				= function(name)
	{
		return formatters[name];
	};
	///////// PRIVATE /////////
	// RegExp для поиска ссылок на параметры в форматировании
	var paramph					= /^\{(\d+)\}$/;
	// Набор форматирований
	var formatters				= {};
	// Строка для заполнения нужным количеством пробелов
	var sp						= '    ';
	// Поиск меток в параметрах форматирования и замена их на значения
	function pp(params, args)
	{
		var r;
		for(var i=0; i<params.length; i++)
		{
			if( (r = paramph.exec(params[i])) != null )
				params[i]		= args[Number(r[1])];				// Параметр - метка
			else
				params[i]		= params[i].replace(/\0/g, ',');	// Параметр - не метка
		}
		return params;
	}
	// Заполнение пробелами до нужного размера
	function fl(s, len)
	{
		len						= Number(len);
		if(isNaN(len))	return s;
		s						= ''+s;
		var nl					= Math.abs(len)-s.length;
		if(nl<=0)		return s;
		while(sp.length<nl) sp	+= sp;
		return len<0?(s+sp.substring(0, nl)):(sp.substring(0, nl)+s);
	}
	///////// ОПЯТЬ PUBLIC /////////
	// Регистрируем форматирование массивов.
	//   первый параметр - разделитель (необязательный)
	//   второй параметр - имя формата для применения к каждому элементу (необязательный)
	//   третий и далее  - соответственно параметры формата каждого элемента
	st.format.add('arr', function arr(va, params)
	{
		if(va==null) return 'null';
		var v					= [];									// Результат
		var j					= params.shift() || '';					// Разделитель
		var f					= formatters[params.shift()];			// Формат элемента
		if(f==null)
			v					= va;									// Нет формата элемента - возвращаем исходный массив
		else 
			for(var i=0; i<va.length; i++) v.push(f(va[i], params));	// Применяем формат к каждому элементу
		return v.join(j);												// Вернуть результат
	});
	
	st.format.add ('obj', function (v, params){
		return v [params];
	});
})(String.prototype);