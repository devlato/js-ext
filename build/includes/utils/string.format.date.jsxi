// ==Jsx==
// @import   string.format
// @compress  on
// ==/Jsx==

/*******************************************************
 * String.Format 1.0 - JScript аналог C# String.Format
 *
 * Copyright (c) 2010, Dema (Dema.ru)
 * Лицензия LGPL для любого использования
 *
 *******************************************************/

// Набор расширений для форматирования дат и времени:
//   :df         - используется родное преобразование в строку
//   :df(формат) - используется указанный формат, где нужно указывать:
//                 yyyy или yy - год
//                 M или MM    - месяц   (один или 2 знака)
//                 d или dd    - день    (один или 2 знака)
//                 H или HH    - часы    (один или 2 знака)
//                 m или mm    - минуты  (один или 2 знака)
//                 s или ss    - секунды (один или 2 знака)
//                 f           - миллисекунды (количество букв f - нужное количество знаков)
//   :d          - короткая запись для :df(dd.MM.yyyy)
//   :dt         - короткая запись для :df(dd.MM.yyyy HH:mm:ss)
//   :dt(nosec)  - короткая запись для :df(dd.MM.yyyy HH:mm)
//   :t          - короткая запись для :df(HH:mm:ss)
//   :t(nosec)   - короткая запись для :df(HH:mm)
//   :ts         - вывод числа в виде записи 100 дн. 5 час. 24 мин. 48 сек. 79 мс, нулевые значения не выводятся, параметры:
//          (msec) - до миллисекунд (по-умолчанию)
//           (sec) - до секунд
//           (min) - до минут
//             (h) - до часов
// Инициализация форматирования:
//   Для форматирования даты и времени в строку можно указать короткие записи:
//     String.prototype.format.init({ df: { nad: 'NaD', d: 'dd.MM.yyyy', dts: 'dd.MM.yyyy HH:mm:ss', dt: 'dd.MM.yyyy HH:mm', t: 'HH:mm', ts: 'HH:mm:ss' } });
//   Для форматирования времени счетчика можно указать текст:
//     String.prototype.format.init({ ts: { d: 'дн.', h: 'час.', m: 'мин.', s: 'сек.', ms: 'мс' } });
(function(format)
{
	// Форматирование даты+времени в строку.
	format.add('df', df);
	// Определяем короткую запись для некоторых форматов
	format.add('d',	 function(v, p){ return df(v, intf.d); });
	format.add('dt', function(v, p){ return df(v, p[0]=='nosec'?intf.dt:intf.dts); });
	format.add('t',  function(v, p){ return df(v, p[0]=='nosec'?intf.t :intf.ts ); });
	// Делаем доступным изменение параметров форматирования
	format.get('df').init		= dfinit;

	// Форматирование времени счетчика:
	// работает с объектом Date или целым числом - количеством мсек,
	// выводит строку типа 1дн. 2час. 3мин. 4сек. 5мс, значения, равные нулю пропускаются
	// :ts(min|sec|msec) - на чем остановиться: min - до минут (дни+часы+минуты), sec - до секунд, msec - до мс (по-умолчанию)
	format.add('ts', function ts(v, params)
	{
		if(v==null) return 'null';
		if(v==0)	return '0';
		var s					= [];							// Результат
		var round				= params[0];					// Параметр вывода
		// Пошли обрабатывать... Может переписать с вложением...?
		v						= tss(v, 1000, s, tsdefault.ms, w = (round=='' || round=='msec') );
		v						= tss(v, 60, s, tsdefault.s, w = (w || round=='sec') );
		v						= tss(v, 60, s, tsdefault.m, w = (w || round=='min') );
		v						= tss(v, 24, s, tsdefault.h, true);
		if(v!=0) s.unshift(v, tsdefault.d);						// Не забываем вывести дни, если они есть
		return s.join(' ');										// Результат!
	});
	// Делаем доступным изменение параметров форматирования
	format.get('ts').init		= tsinit;
	
	///////// PRIVATE /////////
	// Кэш функций форматирования даты+время
	var c						= {};
	// Опять строка для заполнения нужным количеством нулей
	var zz						= '0000';
	// Часто используемые форматы
	var intf					= { nad: 'NaD', d: ['dd.MM.yyyy'], dts: ['dd.MM.yyyy HH:mm:ss'], dt: ['dd.MM.yyyy HH:mm'], t: ['HH:mm'], ts: ['HH:mm:ss'] };
	// Строки для форматирования времени счетчика
	var tsdefault					= { d: 'дн.', h: 'час.', m: 'мин.', s: 'сек.', ms: 'мс' };
	// RegExp поиска меток форматирования даты+времени
	var fpre					= /yyyy|yy|m{1,2}|d{1,2}|H{1,2}|M{1,2}|s{1,2}|f{1,4}/g;
	// Чем заменяются метки форматирования
	var fp						= {	y: 'v.getFullYear()', 
									M: 'v.getMonth()+1', 
									d: 'v.getDate()', 
									H: 'v.getHours()', 
									m: 'v.getMinutes()', 
									s: 'v.getSeconds()', 
									f: 'v.getMilliseconds()'
								};
	// Функция инициализации форматирования даты+времени
	function dfinit(param)
	{
		intf.nad				= param.nad || 'NaD';
		intf.d[0]				= param.d   || 'dd.MM.yyyy';
		intf.dts[0]				= param.dts || 'dd.MM.yyyy HH:mm:ss';
		intf.dt[0]				= param.dt  || 'dd.MM.yyyy HH:mm';
		intf.t[0]				= param.t   || 'HH:mm';
		intf.ts[0]				= param.ts  || 'HH:mm:ss';
	}
	// Функция инициализации форматирования времени счетчика
	function tsinit(param)
	{
		tsdefault.d				= param.d  || 'дн.';
		tsdefault.h				= param.h  || 'час.';
		tsdefault.m				= param.m  || 'мин.';
		tsdefault.s				= param.s  || 'сек.';
		tsdefault.ms			= param.ms || 'мс';
	}
	// Функция форматирования
	function df(v, p)
	{
		if(v==null) return 'null';
		if(!(v instanceof Date)) return intf.nad;
		p						= p.join(',');				// Должен остаться один МакКлауд!
		if(p=='') return v;									// Нет формата - делать нечего
		var f					= c[p];						// Пытаемся получить функцию из кэша...
		if(f==null)											// ...облом-с - будем компилировать!
		{	// Строим исходник функции форматирования
			f					= 'return \'\'.concat(\''+
								  (p
									.replace(/'/g, '\\\'')
									.replace(fpre, function(m){
										var mc		= m.charAt(0);
										return mc=='y'?
												''.concat('\', ', fp[mc], ', \''):
												''.concat('\', a(', fp[mc], ', ', m.length, '), \'');
									})
								  )+
								  '\');';
			f					= new Function('v', 'a', f);// Компиляция, так сказать
			c[p]				= f;						// Загоняем в кэш
		}
		return f(v, addz);									// Форматирование!
	}
	// Добавление нужного количества нулей
	function addz(v, l)
	{
		return zz.substring(0, l-(''+v).length)+v;
	}
	// Шаг обработки вывода времени счетчика
	function tss(dt, div, buf, msn, write)
	{
		if(dt==0) return 0;						// Нуль - валим
		var i					= dt % div;		// Остаток от деления
		if(i!=0 && write) buf.unshift(i, msn);	// Выводим, если нужно
		return Math.floor(dt / div);			// Вернем секвестированное число
	}
})(String.prototype.format);
