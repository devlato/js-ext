module Format {
	import Node;
		
	var eol = '\n';
	
	var additional, jsx;
		
	function reset (){
		additional = {};
		jsx = [];
	}
	
	function commentParse (tag, data){
		if (tag == 'jsx' || additional [tag]){
			[].push.apply (additional [tag] || jsx, data);
		} else
			additional [tag] = data;
	}
	
	var f = lambda
			if (!types [arg.type])
				Node.fatalError ('No formatter for type: ' + arg.type, arg)
			else 
				return types [arg.type](arg),
		types = {
			Program:                  lambda arg.elements.map (f).join (eol),
			Raw:                      lambda arg.value,
			SpecialComment:           lambda commentParse (arg.tag, arg.value) || '',
			NumericLiteral:           lambda arg.value,
			UnaryExpression:          lambda arg.operator + ' ' + f (arg.expression),
			BinaryExpression:         lambda f (arg.left) + ' ' + arg.operator + ' ' + f (arg.right),
			ConditionalExpression:    lambda f (arg.condition) + ' ? ' + f (arg.trueExpression) + ' : ' + f (arg.falseExpression),
			ParenthesizedExpression:  lambda '(' + f (arg.value) + ')',
			VariableStatement:        lambda 'var ' + arg.declarations.map (f).join (', ') + ';',
			VariableDeclarations:     lambda 'var ' + arg.declarations.map (f).join (', '),
			VariableDeclaration:      lambda arg.value ? arg.name + ' = ' + f (arg.value) : arg.name,
			FunctionCall:             lambda f (arg.name) + ' (' + arg.arguments.map (f).join (', ') + ')',
			Function:                 lambda 'function' + (arg.name ? ' ' + arg.name : '') + ' (' + arg.params.join (',') + '){'
				+ eol + arg.elements.map (f).join (eol) + eol + '}',
			StringLiteral:            lambda JSON.stringify (arg.value),
			BooleanLiteral:           lambda arg.value ? 'true' : 'false',
			NullLiteral:              lambda 'null',
			Variable:                 lambda arg.name,
			PropertyAccess:           lambda f (arg.base) + (arg.name.type ? ' [' + f (arg.name) + ']' : '.' + arg.name),
			IfStatement:              lambda 'if (' + f (arg.condition) + ')' + eol + f (arg.ifStatement) 
				+ (arg.elseStatement ? eol + 'else' + eol + f (arg.elseStatement) : ''),
			Block:                    lambda '{' + eol + arg.statements.map (f).join (eol) + eol + '}',
			ReturnStatement:          lambda arg.value ? 'return ' + f (arg.value) + ';' : 'return;',
			EmptyStatement:           lambda ';',
			ExpressionStatement:      lambda f (arg.value) + ';',
			AssignmentExpression:     lambda f (arg.left) + ' ' + arg.operator + ' ' + f (arg.right),
			PostfixExpression:        lambda f (arg.expression) + arg.operator,
			ArrayLiteral:             lambda '[' + arg.elements.map (f).join (',') + ']',
			ObjectLiteral:            lambda '{' + arg.properties.map (f).join (',') + '}',
			RegularExpressionLiteral: lambda '/' + arg.body + '/' + arg.flags,
			This:                     lambda 'this',
			ThrowStatement:           lambda 'throw ' + f (arg.exception) + ';',
			ForStatement:             lambda 'for (' + (arg.initializer ? f (arg.initializer) : '') + '; ' + eol 
				+ (arg.test ? f (arg.test) : '') + '; ' + (arg.counter ? f (arg.counter) : '') + ')' + eol + f (arg.statement),
			ForInStatement:           lambda 'for (' + f (arg.iterator) + ' in ' + f (arg.collection) + ')' + eol 
				+ f (arg.statement),
			ForInStatementExt:           lambda 
				'for (' + f (arg.iterator) + ' in ' + f (arg.collection) + '){' + eol 
				+ 'var ' + f (arg.value) + ' = ' + f (arg.collection) + '[' + f (arg.iterator) + '];' + eol 
				+ (arg.statement.type == 'Block' ? f (arg.statement).slice (1, -1).trim () : f (arg.statement)) + eol + '}',
			WhileStatement:           lambda 'while (' + f (arg.condition) + ')' + eol + f (arg.statement),
			DoWhileStatement:         lambda 'do' + eol + f (arg.statement) + eol + ' while (' + f (arg.condition) + ');',
			SwitchStatement:          lambda 'switch (' + f (arg.expression) + '){' + eol + arg.clauses.map (f).join (eol) 
				+ eol + '}',
			CaseClause:               lambda 'case ' + f (arg.selector) + ':' + eol + arg.statements.map (f).join (eol),
			DefaultClause:            lambda 'default:' + arg.statements.map (lambda f (arg)).join (' '),
			BreakStatement:           lambda arg.label ? 'break ' + arg.label + ';' : 'break;',
			ContinueStatement:        lambda arg.label ? 'continue ' + arg.label + ';' : 'continue;',
			TryStatement:             lambda 'try' + (arg.block.type == 'Block' ? f (arg.block) : '{' + eol + f (arg.block) + eol + '}') 
				+ (arg ['catch'] ? f (arg ['catch']) : '') + (arg ['finally'] ? f (arg ['finally']) : '')
				+ (!arg ['catch'] && !arg ['finally'] ? 'catch (e){}' : ''),
			Catch:                    lambda 'catch (' + arg.identifier + ')' 
				+ (arg.block.type == 'Block' ? f (arg.block) : '{' + eol + f (arg.block) + eol + '}'),
			Finally:                  lambda 'finally' 
				+ (arg.block.type == 'Block' ? f (arg.block) : '{' + eol + f (arg.block) + eol + '}'),
			PropertyAssignment:       lambda JSON.stringify (arg.name) + ':' + f (arg.value),
			NewOperator:              lambda 'new ' + f (arg.constructor) + '(' + arg.arguments.map (f).join (', ') + ')',
			GetterDefinition:         lambda 'get ' + arg.name + ' (){' + arg.body.map (f).join (eol) + '}',
			SetterDefinition:         lambda 'set ' + arg.name + ' (' + arg.param + '){' + arg.body.map (f).join (eol) + '}',
			LabelledStatement:        lambda arg.label + ':' + f (arg.statement),
			WithStatement:            lambda 'with (' + f (arg.environment) + '){' + eol + f (arg.statement) + eol + '}',
			PhpLiteral:               lambda {
				additional.php = true;
				return '/*!<? echo "*"."/"; include "' + arg.value + '"; echo "||/*" ?>*/ null'
			}
		};
		
	export function work (arg){
		reset ();
	
		return {
			code: f (arg).trim (), 
			additional: additional,
			jsx: jsx
		}
	}
}