module Parser {
	import Node, Compressor;
	
	var source, 
		builded, 
		loaded;
	
	var peg = Node.safeAccess ('pegjs', 'build parser');
			
	function getNearFile (file)
		return Node.path ().resolve (__dirname, file);
		
	function rebuildParser (){
		if (!Node.fs ().existsSync (source))
			Node.fatalError ('Parser source not found.');
	
		try {
			var tobuild = Node.readFile (source, 'utf8'),
				result  = 'exports.parser=' + peg ().buildParser (tobuild, { cache: true, trackLineAndColumn: false }).toSource ();
			
			result = result.replace ('return "Expected " + expectedHumanized', 
				'return "[" + line + ": " + column + "] " + "Expected " + expectedHumanized');
			
			try result = Compressor.work (result);
			Node.writeFile (builded, result, 'utf8');
		} catch
			Node.fatalError ('Error while building parser:', e.stack);
	}
	
	export function init (){
		source  = getNearFile ('js-ext.pegjs');
		builded = getNearFile ('js-ext.cache');
	}
	
	export function getReady (){
		if (Node.args ().r || !Node.fs ().existsSync (builded))
			rebuildParser ();
		loaded = require (builded).parser;
	}
	
	export function work (code, filename)	
		try 
			return loaded.parse (code);
		catch 
			Node.fatalError ('Error while parsing "{0}": {1}'.format (filename, e), e.stack);
}